<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <title>User Profile</title>
</head>
<body class="bg-gradient-to-r from-purple-400 via-pink-500 to-red-500">
    <div class="container mx-auto p-4">
        <h1 class="text-3xl font-bold mb-6 text-white text-center">User Profile</h1>
        
        <!-- User Profile Section -->
        <div class="bg-white p-6 rounded-lg shadow-md mb-8 transform duration-300">
            <h2 class="text-2xl font-semibold mb-4 text-purple-600">Your Profile</h2>
            <div id="profileInfo">
                <p class="text-gray-600 mb-2"><strong>Name:</strong> <%= user.name %></p>
                <p class="text-gray-600 mb-2"><strong>Email:</strong> <%= user.email %></p>
                <% if (user.bio) { %>
                    <p class="text-gray-600 mb-2"><strong>Bio:</strong> <%= user.bio %></p>
                <% } %>
                <button onclick="showEditForm()" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition duration-300 mt-4">Edit Profile</button>
            </div>
            <div id="editProfileForm" class="hidden">
                <form onsubmit="updateProfile(event)">
                    <div class="mb-4">
                        <label for="name" class="block text-gray-700 text-sm font-bold mb-2">Name:</label>
                        <input type="text" id="name" name="name" value="<%= user.name %>" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                    </div>
                    <div class="mb-4">
                        <label for="email" class="block text-gray-700 text-sm font-bold mb-2">Email:</label>
                        <input type="email" id="email" name="email" value="<%= user.email %>" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                    </div>
                    <div class="mb-4">
                        <label for="bio" class="block text-gray-700 text-sm font-bold mb-2">Bio:</label>
                        <textarea id="bio" name="bio" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" rows="3"><%= user.bio || '' %></textarea>
                    </div>
                    <div class="flex items-center justify-between">
                        <button type="submit" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition duration-300">Save Changes</button>
                        <button type="button" onclick="hideEditForm()" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition duration-300">Cancel</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Playlists Section -->
        <div class="bg-white p-6 rounded-lg shadow-md">
            <h2 class="text-2xl font-semibold mb-4 text-pink-600">Your Playlists</h2>
            <% if (user.playlists && user.playlists.length > 0) { %>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <% user.playlists.forEach((playlist, index) => { %>
                        <div class="bg-gray-100 p-4 rounded-lg shadow hover:shadow-md transition duration-300">
                            <h3 class="text-lg font-semibold text-purple-700 mb-2"><%= playlist.name %></h3>
                            <p class="text-gray-600 mb-2"><%= playlist.tracks.length %> tracks</p>
                            <div class="flex justify-between">
                                <button onclick="togglePlaylist('<%= index %>')" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition duration-300">View</button>
                                <button  class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition duration-300"><a href="/music/<%=playlist._id%>">Delete</a>
                                </button>
                            </div>
                        </div>
                        <div id="playlist-<%= index %>" class="hidden col-span-full bg-gray-50 p-4 rounded-lg mt-2 relative">
                            <button onclick="togglePlaylist('<%= index %>')" class="absolute top-2 right-2 text-gray-500 hover:text-gray-700">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                            </button>
                            <ul class="list-disc pl-5">
                                <% playlist.tracks.forEach(track => { %>
                                    <li class="mb-2 flex items-center justify-between">
                                        <span><%= track.title %> - <%= track.artist %></span>
                                        <div>
                                            <button onclick="playTrack('<%= track.file %>')" class="bg-green-500 text-white px-2 py-1 rounded text-sm hover:bg-green-600 transition duration-300">Play</button>
                                            <button onclick="deleteTrackFromPlaylist('<%= playlist._id %>', '<%= track._id %>')" class="bg-red-500 text-white px-2 py-1 rounded text-sm hover:bg-red-600 transition duration-300 ml-2">Delete</button>
                                        </div>
                                    </li>
                                <% }); %>
                            </ul>
                        </div>
                    <% }); %>
                </div>
            <% } else { %>
                <p class="text-gray-600">You haven't created any playlists yet.</p>
            <% } %>
        </div>
          <!-- Add to Playlist Modal -->
          <div id="addToPlaylistModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center">
            <div class="bg-white p-8 rounded-lg">
                <h3 class="text-xl font-semibold mb-4">Add to Playlist</h3>
                <select id="playlistSelect" class="w-full p-2 mb-4 border rounded">
                    <% user.playlists.forEach(playlist => { %>
                        <option value="<%= playlist._id %>"><%= playlist.name %></option>
                    <% }); %>
                </select>
                <div class="flex justify-end">
                    <button onclick="closeAddToPlaylistModal()" class="bg-gray-500 text-white px-4 py-2 rounded mr-2">Cancel</button>
                    <button onclick="addToPlaylist()" class="bg-blue-500 text-white px-4 py-2 rounded">Add</button>
                </div>
            </div>
        </div>
    </div>
    </div>

    <div id="audioPlayerContainer" class="fixed bottom-0 left-0 right-0 bg-white shadow-md p-4 hidden">
        <div class="flex justify-between items-center">
            <audio id="audioPlayer" controls class="w-full"></audio>
            <button onclick="closeAudioPlayer()" class="ml-4 text-gray-500 hover:text-gray-700">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
    </div>

    <script>
        function togglePlaylist(index) {
            const playlist = document.getElementById(`playlist-${index}`);
            playlist.classList.toggle('hidden');
        }

        function playTrack(trackUrl) {
            const audioPlayer = document.getElementById('audioPlayer');
            const audioPlayerContainer = document.getElementById('audioPlayerContainer');
            audioPlayer.src = trackUrl;
            audioPlayer.play();
            audioPlayerContainer.classList.remove('hidden');
        }

        function closeAudioPlayer() {
            const audioPlayer = document.getElementById('audioPlayer');
            const audioPlayerContainer = document.getElementById('audioPlayerContainer');
            audioPlayer.pause();
            audioPlayer.currentTime = 0;
            audioPlayerContainer.classList.add('hidden');
        }

        function deletePlaylist(playlistId) {
            if (confirm('Are you sure you want to delete this playlist?')) {
                fetch(`/music/delete-playlist/${playlistId}`, {
                    method: 'GET',
                    credentials: 'include'
                })
                .then(response => {
                    if (response.redirected) {
                        window.location.href = response.url;
                    } else {
                        return response.json();
                    }
                })
                .then(data => {
                    if (data) {
                        alert(data.message);
                        location.reload();
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while deleting the playlist');
                });
            }
        }
        function deleteTrackFromPlaylist(playlistId, trackId) {
            if (confirm('Are you sure you want to remove this track from the playlist?')) {
                fetch(`/music/playlist/${playlistId}/track/${trackId}`, {
                    method: 'DELETE',
                    credentials: 'include'
                })
                .then(response => response.json())
                .then(data => {
                    alert(data.message);
                    location.reload();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while removing the track from the playlist');
                });
            }
        }

        function showEditForm() {
            document.getElementById('profileInfo').classList.add('hidden');
            document.getElementById('editProfileForm').classList.remove('hidden');
        }

        function hideEditForm() {
            document.getElementById('profileInfo').classList.remove('hidden');
            document.getElementById('editProfileForm').classList.add('hidden');
        }

        function updateProfile(event) {
            event.preventDefault();
            const formData = new FormData(event.target);
            const updatedProfile = Object.fromEntries(formData);

            fetch('/users/update-profile', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(updatedProfile),
                credentials: 'include'
            })
            .then(response => response.json())
            .then(data => {
                alert(data.message);
                location.reload();
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while updating the profile');
            });
        }
    </script>
</body>
</html>
